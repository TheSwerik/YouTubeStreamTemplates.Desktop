name: release

on:
  push:
    branches: [main]
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+' # Push events to matching [0-9]+.[0-9]+.[0-9]+, i.e. 1.0.0, 187.753.5

env:
  PROJECT_NAME: YouTubeStreamTemplatesCrossPlatform
  FILENAME: YouTubeStreamTemplates
  ARTIFACT_WIN: windows-artifact
  ARTIFACT_UNIX: unix-artifact

jobs:
  build-unix:
#    if: github.event.base_ref == 'refs/heads/main'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/setup-msbuild@v1.0.2

      - name: Change Project Variables
        run: |
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<OutputType>Exe</OutputType>', '<OutputType>WinExe</OutputType>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<DisableWinExeOutputInference>true</DisableWinExeOutputInference>', '<DisableWinExeOutputInference>false</DisableWinExeOutputInference>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"

      - name: Get PFX-Cert
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          [IO.File]::WriteAllBytes('developer-cert.pfx', $bytes)
          Import-PfxCertificate -FilePath .\developer-cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String '${{ secrets.PFX_KEY }}' -AsPlainText -Force)
          ls

      - name: Publish Ubuntu
        run: msbuild /t:restore,publish  -v:m /p:Configuration=Release /p:PublishProfile=PublishSigned /p:PublishDir=..\Publish\linux -property:RuntimeIdentifiers=linux-x64 -property:RuntimeIdentifier=linux-x64

      - name: Clean obj
        run: get-childitem -Include obj -Recurse -force | Remove-Item -Force -Recurse

      - name: Publish MacOS
        run: msbuild /t:restore,publish  -v:m /p:Configuration=Release /p:PublishProfile=PublishSigned /p:PublishDir=..\Publish\mac -property:RuntimeIdentifiers=osx-x64 -property:RuntimeIdentifier=osx-x64

      - name: add Publish-Files to Ubuntu
        run: cp Release\* Publish\linux
        
      - name: Zip Ubuntu
        run: |
          New-Item -Path . -Name "Installer" -ItemType "directory"
          tar -C Publish/linux -czf "Installer/${{ env.FILENAME }}.tar.gz" .

      - name: Zip MacOS 
        run: 7z a "Installer/${{ env.FILENAME }}.zip" ./Publish/mac/*

      - uses: actions/upload-artifact@v2 
        with:
          name: ${{ env.ARTIFACT_UNIX }}
          path: |
            Installer/${{ env.FILENAME }}.tar.gz
            Installer/${{ env.FILENAME }}.zip

  build-windows:
#    if: github.event.base_ref == 'refs/heads/main'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/setup-msbuild@v1.0.2

      - name: Get Version
        run: $env:VERSION = ${GITHUB_REF##*/}

      - name: Change Project Variables
        run: |
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<OutputType>Exe</OutputType>', '<OutputType>WinExe</OutputType>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"
          (gc "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj") -replace '<DisableWinExeOutputInference>true</DisableWinExeOutputInference>', '<DisableWinExeOutputInference>false</DisableWinExeOutputInference>' | Out-File -encoding ASCII "${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj"
          (gc "Inno Config.iss") -replace '"0.0.0"', '"${{ env.VERSION }}"' | Out-File -encoding ASCII "Inno Config.iss"

      - name: Get PFX-Cert
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          [IO.File]::WriteAllBytes('developer-cert.pfx', $bytes)
          Import-PfxCertificate -FilePath .\developer-cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String '${{ secrets.PFX_KEY }}' -AsPlainText -Force)

      - name: asdsa
        run: echo version is ${VERSION}
#TODO fix version and change deploy back to tag
#TODO release the old releases
      - name: Publish 64bit
        run: msbuild /t:restore,publish -v:m /p:Configuration=Release /p:PublishProfile=PublishSigned /p:PublishDir=..\Publish\bin\64bit -property:RuntimeIdentifiers=win-x64 -property:RuntimeIdentifier=win-x64

      - name: Clean obj
        run: get-childitem -Include obj -Recurse -force | Remove-Item -Force -Recurse

      - name: Publish 32bit
        run: msbuild /t:restore,publish  -v:m /p:Configuration=Release /p:PublishProfile=PublishSigned /p:PublishDir=..\Publish\bin\32bit -property:RuntimeIdentifiers=win-x86 -property:RuntimeIdentifier=win-x86

      - name: Create Installer
        run: iscc "/ssigntool=`$qC:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe`$q sign /f developer-cert.pfx /t http://timestamp.comodoca.com/authenticode /p ${{ secrets.PFX_KEY }} /fd sha256 $f" /qp "Inno Config.iss"

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_WIN }}
          path: Installer/${{ env.FILENAME }}.exe

  create-release:
    needs: [ build-unix, build-windows ]
    if: github.event.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: Installer

      - name: Get Version
        run: echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          prerelease: ${{ startsWith(env.VERSION, '0.') }}
          draft: false
          files: |
            Installer/${{ env.ARTIFACT_WIN }}/${{ env.FILENAME }}.exe
            Installer/${{ env.ARTIFACT_UNIX }}/${{ env.FILENAME }}.zip
            Installer/${{ env.ARTIFACT_UNIX }}/${{ env.FILENAME }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}